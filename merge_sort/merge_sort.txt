

1. 합병 정렬(merge sort) 알고리즘의 개념 요약

    ‘존 폰 노이만(John von Neumann)’이 제안한 방법
    일반적인 방법으로 구현했을 때 이 정렬은 안정 정렬 에 속하며, 분할 정복 알고리즘의 하나 이다.
        분할 정복(divide and conquer) 방법
            문제를 작은 2개의 문제로 분리하고 각각을 해결한 다음, 결과를 모아서 원래의 문제를 해결하는 전략이다.
            분할 정복 방법은 대개 순환 호출을 이용하여 구현한다.
    과정 설명
        리스트의 길이가 0 또는 1이면 이미 정렬된 것으로 본다. 그렇지 않은 경우에는
        정렬되지 않은 리스트를 절반으로 잘라 비슷한 크기의 두 부분 리스트로 나눈다.
        각 부분 리스트를 재귀적으로 합병 정렬을 이용해 정렬한다.
        두 부분 리스트를 다시 하나의 정렬된 리스트로 합병한다.


2. 합병 정렬(merge sort) 알고리즘의 구체적인 개념

    하나의 리스트를 두 개의 균등한 크기로 분할하고 분할된 부분 리스트를 정렬한 다음, 두 개의 정렬된 부분 리스트를 합하여 전체가 정렬된 리스트가 되게 하는 방법이다.
    합병 정렬은 다음의 단계들로 이루어진다.
        분할(Divide): 입력 배열을 같은 크기의 2개의 부분 배열로 분할한다.
        정복(Conquer): 부분 배열을 정렬한다. 부분 배열의 크기가 충분히 작지 않으면 순환 호출 을 이용하여 다시 분할 정복 방법을 적용한다.
        결합(Combine): 정렬된 부분 배열들을 하나의 배열에 합병한다.
    합병 정렬의 과정
        추가적인 리스트가 필요하다.
        각 부분 배열을 정렬할 때도 합병 정렬을 순환적으로 호출하여 적용한다.
        합병 정렬에서 실제로 정렬이 이루어지는 시점은 2개의 리스트를 합병(merge)하는 단계 이다.


3. 합병 정렬(merge sort) 알고리즘의 특징

        단점
            만약 레코드를 배열(Array)로 구성하면, 임시 배열이 필요하다.
                제자리 정렬(in-place sorting)이 아니다.
            레크드들의 크기가 큰 경우에는 이동 횟수가 많으므로 매우 큰 시간적 낭비를 초래한다.
        장점
            안정적인 정렬 방법
                데이터의 분포에 영향을 덜 받는다. 즉, 입력 데이터가 무엇이든 간에 정렬되는 시간은 동일하다. (O(nlog₂n)로 동일)
            만약 레코드를 연결 리스트(Linked List)로 구성하면, 링크 인덱스만 변경되므로 데이터의 이동은 무시할 수 있을 정도로 작아진다.
                제자리 정렬(in-place sorting)로 구현할 수 있다.
            따라서 크기가 큰 레코드를 정렬할 경우에 연결 리스트를 사용한다면, 합병 정렬은 퀵 정렬을 포함한 다른 어떤 졍렬 방법보다 효율적이다.


4. reference
https://gmlwjd9405.github.io/2018/05/08/algorithm-merge-sort.html








private void devide_list(List<T> list){ 4개
        if(list.size() > 1){
            //절반나누기



            devide_list(list.subList(0,list.size()/2));
            private void devide_list(List<T> list){     2개
                    if(list.size() > 1){
                        //절반나누기



                        devide_list(list.subList(0,list.size()/2));

                        System.out.print("앞 ");
                        print_list(list);


                        devide_list(list.subList(list.size()/2,list.size()));
                        System.out.print("뒤 ");
                        print_list(list);
                    }
                }

            System.out.print("앞 ");
            print_list(list);


            devide_list(list.subList(list.size()/2,list.size()));
            System.out.print("뒤 ");
            print_list(list);
        }
    }